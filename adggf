local zones = {
    [1] = "Forest Digsite",
    [2] = "Dark Forest Digsite",
    [3] = "Pyramids Digsite",
    [4] = "Beach Digsite",
    [5] = "Jungle Digsite",
    [6] = "Volcano Digsite",
    [7] = "Crystal Caves Digsite",
    [8] = "Pirate Cove Digsite",
    [9] = "Farm Digsite",
    [10] = "Kingdom Digsite",
    [11] = "Magical Digsite",
    [12] = "Enchanted Digsite"
}

local eggs_open = {
    [1] = "Basic Egg",
    [2] = "Forest Egg",
    [3] = "Egyptian Egg",
    [4] = "Beach Egg",
    [5] = "Jungle Egg",
    [6] = "Molten Egg",
    [7] = "Crystal Egg",
    [8] = "Pirate Egg",
    [9] = "Hay Egg",
    [10] = "Crowned Egg",
    [11] = "Witch Egg",
    [12] = "Magical Egg"
}

getgenv().current_zone_max_unlocked = ""
getgenv().current_zone_number = 0

local check_current_zone = function()
    getgenv().current_zone_max_unlocked = "VIP Digsite"
    getgenv().current_zone_number = 12
end
check_current_zone()
local args = {
    [1] = workspace:WaitForChild("BlockRegions")[getgenv().current_zone_max_unlocked]:WaitForChild("Teleport")
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Teleport"):WaitForChild("TeleportClient"):FireServer(unpack(args))

-- Checking Egg Cost
--dickaxe
-- Checking Egg Cost ending

--Anti AFK
local antiafk = function()
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

--End Anti AFK
-- AutoDig on player current zone
local AutoDig = function ()
    if getgenv().current_zone_max_unlocked == "VIP Digsite" then
        local args = {
            [1] = workspace:WaitForChild("BlockRegions")[getgenv().current_zone_max_unlocked]:WaitForChild("Teleport")
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Teleport"):WaitForChild("TeleportClient"):FireServer(unpack(args))
        wait(2)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Eggs["Basic Egg"].EggPos.CFrame
        while task.wait() do
            local args = {
                [1] = workspace:WaitForChild("Eggs")["Basic Egg"],
                [2] = tonumber(game.Players.LocalPlayer.upgrades.EggsMax.Value)
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Eggs"):WaitForChild("Hatch"):FireServer(unpack(args))  
        end
    end
end
local co3 = coroutine.create(AutoDig)

-- AutoCollect
local AutoCollectState = true
local AutoCollect = function()
    while AutoCollectState do
        for _,v in pairs(game.Workspace.Drops:GetChildren()) do
            local args = {
                [1] = tonumber(v.Name)
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Drops"):WaitForChild("Collect"):FireServer(unpack(args))
            v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            task.wait()
        end
        task.wait(.5)
    end
end
-- Auto Pet Dig
local PetDig = function()
    while task.wait() do
        check_current_zone()
        local tbl = {}
        local tbl2 = {}
        local top2
        local minimum_y = -10000
        for _,v in pairs(game.workspace.BlockRegions[getgenv().current_zone_max_unlocked].Global:GetChildren()) do
            pcall(function()
                if tonumber(v.PrimaryPart.Position.Y) > minimum_y then
                    top2 = minimum_y
                    minimum_y = tonumber(v.PrimaryPart.Position.Y)
                end
            end)    
        end
        for _,v in pairs(game.workspace.BlockRegions[getgenv().current_zone_max_unlocked].Global:GetChildren()) do
            pcall(function()
                if tonumber(v.PrimaryPart.Position.Y) == minimum_y and not v:FindFirstChild("Broken") then
                    table.insert(tbl, v)
                end    
            end)
            if #tbl == tonumber(game.Players.LocalPlayer.upgrades.PetsMax.Value) then break end
        end
        if #tbl < tonumber(game.Players.LocalPlayer.upgrades.PetsMax.Value) then
            for _,v in pairs(game.workspace.BlockRegions[getgenv().current_zone_max_unlocked].Global:GetChildren()) do
                pcall(function()
                    if tonumber(v.PrimaryPart.Position.Y) == top2 and not v:FindFirstChild("Broken") then
                        table.insert(tbl, v)
                    end
                end)
                if #tbl == tonumber(game.Players.LocalPlayer.upgrades.PetsMax.Value) then break end
            end
        end
        for _,v in pairs(game.workspace.PetsMasterFolder[game.Players.LocalPlayer.Name]:GetChildren()) do
            table.insert(tbl2, v)
        end
        local a = 1
        local b = 1
        repeat
            local args = {
                [1] = tbl[a],
                [2] = tbl2[b]
            }
            game:GetService("ReplicatedStorage").Events.Blocks.Damage:FireServer(unpack(args))
            a += 1
            b += 1
            if #tbl <= a then break end
            if b == #tbl2 then b = 1 end
            task.wait()
        until #tbl + 1 <= a
        task.wait()
    end
end

-- local autominigame = function()
--     if 
-- end


local co1 = coroutine.create(AutoCollect)
local co4 = coroutine.create(PetDig)
local co6 = coroutine.create(antiafk)

coroutine.resume(co1)
coroutine.resume(co4)
coroutine.resume(co6)
coroutine.resume(co3)
